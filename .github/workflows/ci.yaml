name: CI

on:
  push:
    branches:
      - "main"
  pull_request:
    branches:
      - "main"
  schedule:
    - cron: "0 0 * * *"

defaults:
  run:
    shell: bash -l {0}

concurrency:
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true

jobs:
  test:
    name: Test on ${{ matrix.os }}, Python ${{ matrix.python-version }}, Latest openff-toolkit ${{ matrix.latest-openff-toolkit }}
    runs-on: ${{ matrix.os }}
    env:
      OE_LICENSE: ${{ github.workspace }}/oe_license.txt
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macOS-latest]
        python-version: ["3.8", "3.9", "3.10"]
        latest-openff-toolkit: [true, false]

    steps:
    - uses: actions/checkout@v2

    - name: Setup Conda Environment
      uses: mamba-org/provision-with-micromamba@main
      with:
        environment-file: devtools/conda-envs/test_env.yaml
        extra-specs: |
          python=${{ matrix.python-version }}

    - name: License OpenEye
      shell: bash -l {0}
      run: |
        echo "${SECRET_OE_LICENSE}" > ${OE_LICENSE}
        python -c "from openeye import oechem; assert oechem.OEChemIsLicensed()"
      env:
        SECRET_OE_LICENSE: ${{ secrets.OE_LICENSE }}

    - name: "Install latest openff-toolkit"
      if: ${{ matrix.latest-openff-toolkit == true }}
      run: |
        # Until #225 is complete, we should not assume compatibility with new API
        micromamba install "openff-toolkit =0.10.6" -c conda-forge -y

    - name: Install Package
      run: |
        # Can't use 'develop' mode because we remove symlinks after install is complete
        python setup.py install

    - name: Conda Environment Information
      run: |
        conda info
        conda list

    - name: Test Installed Package
      run: |
        pytest -v -x -s --log-cli-level $LOGLEVEL --cov=openmmforcefields openmmforcefields/tests/test_amber_import.py
        pytest -v -x -s --log-cli-level $LOGLEVEL --cov=openmmforcefields openmmforcefields/tests/test_template_generators.py
        pytest -v -x -s --log-cli-level $LOGLEVEL --cov=openmmforcefields openmmforcefields/tests/test_system_generator.py
      env:
        LOGLEVEL: "INFO"
        KMP_DUPLICATE_LIB_OK: "True"

    - name: Test AMBER conversion
      run: |
        python convert_amber.py --input gaff.yaml --log gaff-tests.csv --verbose
      working-directory: ./amber

    - name: Test CHARMM conversion
      run: |

        # TODO: Uncomment these tests when new ParmEd is released
        # TODO: Find a way to avoid timing out when running full charmm36.yaml conversion below
        # python convert_charmm.py --verbose --in files/waters.yaml && python convert_charmm.py --verbose --in files/charmm36.yaml
        # python convert_charmm.py --verbose --in files/waters.yaml
        # python convert_charmm.py --verbose

        # TODO: Uncomment this when tests are expected to work
        # python test_charmm.py --verbose

      working-directory: ./charmm

    - name: CodeCov
      if: ${{ github.repository == 'openmm/openmmforcefields'
              && github.event != 'schedule' }}
      uses: codecov/codecov-action@v2.1.0
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-${{ matrix.os }}-py${{ matrix.python-version }}
